vavix.lang.instrumentation.PropertiesClassFileTransformer.0.class=org/benf/cfr/reader/bytecode/analysis/parse/utils/LValueAssignmentAndAliasCondenser$AliasRewriter
vavix.lang.instrumentation.PropertiesClassFileTransformer.0.method=getLValueReplacement
# CAUTION an inner class method's $0 means the inner class itself.
vavix.lang.instrumentation.PropertiesClassFileTransformer.0.insertBefore={if ($3.toString().indexOf("subidx") > 0 || $3.toString().indexOf("idx()") > 0) { new Exception($3.toString()).printStackTrace(); }}
vavix.lang.instrumentation.PropertiesClassFileTransformer.0.insertAfter={if ($3.toString().indexOf("subidx") > 0 || $3.toString().indexOf("idx()") > 0) { System.err.println("RETURN: " + ($_ != null ? $_.toString() : "null")); }}

vavix.lang.instrumentation.PropertiesClassFileTransformer.1.class=java/lang/RuntimeException
vavix.lang.instrumentation.PropertiesClassFileTransformer.1.method=*
vavix.lang.instrumentation.PropertiesClassFileTransformer.1.insertBefore={ new Exception().printStackTrace(); }

vavix.lang.instrumentation.PropertiesClassFileTransformer.2.class=org/benf/cfr/reader/util/output/LoggerFactory
vavix.lang.instrumentation.PropertiesClassFileTransformer.2.method=create
vavix.lang.instrumentation.PropertiesClassFileTransformer.2.insertBefore={ org.benf.cfr.reader.util.output.LoggerFactory.level = java.util.logging.Level.ALL; }

# we cannot modify class twice...
vavix.lang.instrumentation.PropertiesClassFileTransformer.3.class=org/benf/cfr/reader/util/output/LogFormatter
vavix.lang.instrumentation.PropertiesClassFileTransformer.3.method=format
vavix.lang.instrumentation.PropertiesClassFileTransformer.3.insertAfter={ $_ = new java.util.logging.SimpleFormatter().format($$); }

vavix.lang.instrumentation.PropertiesClassFileTransformer.5.class=org/benf/cfr/reader/bytecode/analysis/structured/statement/Block
vavix.lang.instrumentation.PropertiesClassFileTransformer.5.method=markCreator
#vavix.lang.instrumentation.PropertiesClassFileTransformer.5.insertBefore={ System.err.println(this.name); }
#vavix.lang.instrumentation.PropertiesClassFileTransformer.5.insertBefore={ if (this.name.getStringName().equals("heapMap")) { new Exception(this.name.getStringName()).printStackTrace(); }}
vavix.lang.instrumentation.PropertiesClassFileTransformer.5.insertAfter={System.err.println(this.containedStatements.get(0));}

vavix.lang.instrumentation.PropertiesClassFileTransformer.6.class=org/benf/cfr/reader/bytecode/analysis/opgraph/Op04StructuredStatement
vavix.lang.instrumentation.PropertiesClassFileTransformer.6.method=dump
vavix.lang.instrumentation.PropertiesClassFileTransformer.6.insertBefore={if (this.structuredStatement instanceof org.benf.cfr.reader.bytecode.analysis.structured.statement.StructuredDefinition) { System.err.println(this.structuredStatement); }}
#vavix.lang.instrumentation.PropertiesClassFileTransformer.6.insertBefore={ System.err.println(this.structuredStatement.getClass().getName()); }

vavix.lang.instrumentation.PropertiesClassFileTransformer.7.class=java/lang/Exception
vavix.lang.instrumentation.PropertiesClassFileTransformer.7.method=*
vavix.lang.instrumentation.PropertiesClassFileTransformer.7.insertBefore={ try { new Exception().printStackTrace(new java.io.PrintStream(new java.io.FileOutputStream("xxx.err"))); } catch (java.io.IOException e) {}}
